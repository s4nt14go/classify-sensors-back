service: classify-sensors

package:
  individually: true  # Create an optimized package for our functions

custom:
  stage: ${opt:stage, self:provider.stage}
  bundle:
    sourcemaps: false # avoid 'x is not a function' error with imports
  onFailureQueueForClassifyName: ${self:service}-${self:custom.stage}-OnFailureQueueForClassify

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-iam-roles-per-function
  - serverless-pseudo-parameters
  - serverless-export-env

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: us-east-1

functions:
  classify:
    handler: src/classify.classify
    events:
      - s3:
          bucket: !Ref UploadBucket
          event: s3:ObjectCreated:*
          existing: true
    environment:
      OUTPUT_BUCKET: !Ref OutputBucket
      TABLE: !Ref Table
    maximumRetryAttempts: 0 # For testing purposes let's assume that when we get an error, it's unrecoverable so we don't want to wait lambda for the 2 default retries, it will send the error straight to onFailureQueueForClassify
    destinations:
      onFailure: arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:${self:custom.onFailureQueueForClassifyName}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: !Sub ${UploadBucket.Arn}/*
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: !Sub ${OutputBucket.Arn}/*
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: !GetAtt Table.Arn
      - Effect: Allow
        Action: SQS:SendMessage
        Resource: !GetAtt OnFailureQueueForClassify.Arn

  sign-post:
    handler: src/sign-post.sign
    events:
      - http:
          path: /sign-post
          method: get
    environment:
      UPLOAD_BUCKET: !Ref UploadBucket
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: !Sub ${UploadBucket.Arn}/*

  check-results:
    handler: src/check-results.check
    events:
      - http:
          path: /check-results
          method: get
    environment:
      TABLE: !Ref Table
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:Query
        Resource: !GetAtt Table.Arn

resources:
  Resources:
    UploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - PUT
                - POST
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
    OutputBucket:
      Type: AWS::S3::Bucket

    Table:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: sessionId
            KeyType: HASH
          - AttributeName: filename
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: sessionId
            AttributeType: S
          - AttributeName: filename
            AttributeType: S

    OnFailureQueueForClassify:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.onFailureQueueForClassifyName}

  Outputs:

    ApiUrl:
      Value:
        !Join
          - ''
          - - 'https://'
            - !Ref ApiGatewayRestApi
            - '.execute-api.'
            - ${opt:region, self:provider.region}
            - '.amazonaws.com/'
            - ${self:custom.stage}
